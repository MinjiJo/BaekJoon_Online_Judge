/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2019-11-13 08:50:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch9_005fupload_005fdown;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import java.util.*;

public final class fileUpload2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String uploadPath = application.getRealPath("upload");
	out.print(uploadPath);
	
	int size = 10*1024*1024; //파일 최대 크기를 10MB로 지정합니다.
	String name="";
	String subject="";
	String filename1="";
	String filename2="";
	String origfilename1="";
	String origfilename2="";
	
	try{
		//업로드를 담당하는 부분입니다.
		//첫 번째 인자 request : 폼에서 가져온 값을 얻기 위해 request객체를 전달해 줍니다.
		//두 번째 인자 uploadPath : 업로드될 파일의 위치 입니다.
		//세 번째 인자 size : 업로드 할 크기이며 지정 크기보다 크면 Exception발생합니다.
		//네 번째 인자 "euc-kr" : 파일 이름이 한글인 경우 처리하는 부분입니다.
		//다섯 번째 인자 : 똑같은 파일을 업로드 할 경우 중복되지 않도록 자동으로
		//파일이름을 변환해주는 기능을 합니다.
		MultipartRequest multi=new MultipartRequest(request,
							uploadPath,
							size,
							"euc-kr",
				new DefaultFileRenamePolicy());
	
		name=multi.getParameter("name");
		subject=multi.getParameter("subject");

		//업로드된 파일의 시스템 상에 업로드된 실제 파일명을 얻어 옵니다.
		filename1 = multi.getFilesystemName("fileName1");
		out.println("<br>multi.getFilesystemName(fileName1)="
						+ filename1);
		
		//업로드된 파일의 원본 파일명을 얻어 옵니다.
		origfilename1 = multi.getOriginalFileName("fileName1");
		out.println("<br>multi.getOriginalFileName(fileName1)="
						+ origfilename1);
		
		//두번째 파일 이름을 얻어 옵니다.
		filename2 = multi.getFilesystemName("fileName2");
		out.println("<br>multi.getFilesystemName(fileName2)="
						+ filename2);
		origfilename2 = multi.getOriginalFileName("fileName2");
		out.println("<br>multi.getOriginalFileName(fileName2)="
						+ origfilename2);
	}catch(Exception e){
		//e.printStackTrace();
		out.print("에러입니다.");
	}

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<body>\r\n");
      out.write("<form name=\"filecheck\" action=\"fileCheck.jsp\" method=\"post\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"name\" value=\"");
      out.print(name );
      out.write("\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"subject\" value=\"");
      out.print(subject );
      out.write("\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"filename1\" value=\"");
      out.print(filename1 );
      out.write("\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"filename2\" value=\"");
      out.print(filename2 );
      out.write("\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"origfilename1\" value=\"");
      out.print(origfilename1 );
      out.write("\">\r\n");
      out.write("\t<input type=\"hidden\" name=\"origfilename2\" value=\"");
      out.print(origfilename2 );
      out.write("\">\r\n");
      out.write("\t<input type=\"submit\" value=\"업로드 확인 및 다운로드 페이지 이동\">\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
